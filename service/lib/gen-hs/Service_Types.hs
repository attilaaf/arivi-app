{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Service_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


type Int = I.Int32

data Failure = Failure  { failure_code :: I.Int32
  , failure_reason :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance X.Exception Failure
instance H.Hashable Failure where
  hashWithSalt salt record = salt   `H.hashWithSalt` failure_code record   `H.hashWithSalt` failure_reason record  
instance QC.Arbitrary Failure where 
  arbitrary = M.liftM Failure (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Failure = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Failure{failure_code = failure_code obj} then P.Nothing else P.Just $ default_Failure{failure_code = failure_code obj}
    , if obj == default_Failure{failure_reason = failure_reason obj} then P.Nothing else P.Just $ default_Failure{failure_reason = failure_reason obj}
    ]
from_Failure :: Failure -> T.ThriftVal
from_Failure record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("code",T.TI32 _v2))) $ failure_code record
  , (\_v2 -> P.Just (2, ("reason",T.TString $ E.encodeUtf8 _v2))) $ failure_reason record
  ]
write_Failure :: T.Protocol p => p -> Failure -> P.IO ()
write_Failure oprot record = T.writeVal oprot $ from_Failure record
encode_Failure :: T.StatelessProtocol p => p -> Failure -> LBS.ByteString
encode_Failure oprot record = T.serializeVal oprot $ from_Failure record
to_Failure :: T.ThriftVal -> Failure
to_Failure (T.TStruct fields) = Failure{
  failure_code = P.maybe (failure_code default_Failure) (\(_,_val4) -> (case _val4 of {T.TI32 _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  failure_reason = P.maybe (failure_reason default_Failure) (\(_,_val4) -> (case _val4 of {T.TString _val6 -> E.decodeUtf8 _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Failure _ = P.error "not a struct"
read_Failure :: T.Protocol p => p -> P.IO Failure
read_Failure iprot = to_Failure <$> T.readVal iprot (T.T_STRUCT typemap_Failure)
decode_Failure :: T.StatelessProtocol p => p -> LBS.ByteString -> Failure
decode_Failure iprot bs = to_Failure $ T.deserializeVal iprot (T.T_STRUCT typemap_Failure) bs
typemap_Failure :: T.TypeMap
typemap_Failure = Map.fromList [(1,("code",T.T_I32)),(2,("reason",T.T_STRING))]
default_Failure :: Failure
default_Failure = Failure{
  failure_code = 0,
  failure_reason = ""}
