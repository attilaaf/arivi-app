{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module AriviNetworkService_Client(ping,sendRequest,subscribe,publish,notify) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Service_Types
import AriviNetworkService
seqid = R.newIORef 0
ping (ip,op) = do
  send_ping op
  recv_ping ip
send_ping op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("ping", T.M_CALL, seqn) $
    write_Ping_args op (Ping_args{})
recv_ping ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Ping_result ip
    P.return $ ping_result_success res
sendRequest (ip,op) arg_logid arg_jsonReq = do
  send_sendRequest op arg_logid arg_jsonReq
  recv_sendRequest ip
send_sendRequest op arg_logid arg_jsonReq = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("sendRequest", T.M_CALL, seqn) $
    write_SendRequest_args op (SendRequest_args{sendRequest_args_logid=arg_logid,sendRequest_args_jsonReq=arg_jsonReq})
recv_sendRequest ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_SendRequest_result ip
    P.maybe (P.return ()) X.throw (sendRequest_result_fail res)
    P.return $ sendRequest_result_success res
subscribe (ip,op) arg_topic = do
  send_subscribe op arg_topic
  recv_subscribe ip
send_subscribe op arg_topic = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("subscribe", T.M_CALL, seqn) $
    write_Subscribe_args op (Subscribe_args{subscribe_args_topic=arg_topic})
recv_subscribe ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Subscribe_result ip
    P.maybe (P.return ()) X.throw (subscribe_result_fail res)
    P.return ()
publish (ip,op) arg_topic arg_message = do
  send_publish op arg_topic arg_message
  recv_publish ip
send_publish op arg_topic arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("publish", T.M_CALL, seqn) $
    write_Publish_args op (Publish_args{publish_args_topic=arg_topic,publish_args_message=arg_message})
recv_publish ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Publish_result ip
    P.maybe (P.return ()) X.throw (publish_result_fail res)
    P.return ()
notify (ip,op) arg_topic arg_message = do
  send_notify op arg_topic arg_message
  recv_notify ip
send_notify op arg_topic arg_message = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessage op ("notify", T.M_CALL, seqn) $
    write_Notify_args op (Notify_args{notify_args_topic=arg_topic,notify_args_message=arg_message})
recv_notify ip = do
  T.readMessage ip $ \(fname, mtype, rseqid) -> do
    M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; X.throw exn }
    res <- read_Notify_result ip
    P.maybe (P.return ()) X.throw (notify_result_fail res)
    P.return ()
