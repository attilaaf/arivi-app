{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module AriviNetworkService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Service_Types
import qualified AriviNetworkService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Ping_args = Ping_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Ping_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_args where 
  arbitrary = QC.elements [Ping_args]
from_Ping_args :: Ping_args -> T.ThriftVal
from_Ping_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_args :: T.Protocol p => p -> Ping_args -> P.IO ()
write_Ping_args oprot record = T.writeVal oprot $ from_Ping_args record
encode_Ping_args :: T.StatelessProtocol p => p -> Ping_args -> LBS.ByteString
encode_Ping_args oprot record = T.serializeVal oprot $ from_Ping_args record
to_Ping_args :: T.ThriftVal -> Ping_args
to_Ping_args (T.TStruct fields) = Ping_args{

  }
to_Ping_args _ = P.error "not a struct"
read_Ping_args :: T.Protocol p => p -> P.IO Ping_args
read_Ping_args iprot = to_Ping_args <$> T.readVal iprot (T.T_STRUCT typemap_Ping_args)
decode_Ping_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Ping_args
decode_Ping_args iprot bs = to_Ping_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_args) bs
typemap_Ping_args :: T.TypeMap
typemap_Ping_args = Map.fromList []
default_Ping_args :: Ping_args
default_Ping_args = Ping_args{
}
data Ping_result = Ping_result  { ping_result_success :: P.Bool
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Ping_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` ping_result_success record  
instance QC.Arbitrary Ping_result where 
  arbitrary = M.liftM Ping_result (QC.arbitrary)
  shrink obj | obj == default_Ping_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Ping_result{ping_result_success = ping_result_success obj} then P.Nothing else P.Just $ default_Ping_result{ping_result_success = ping_result_success obj}
    ]
from_Ping_result :: Ping_result -> T.ThriftVal
from_Ping_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v14 -> P.Just (0, ("success",T.TBool _v14))) $ ping_result_success record
  ]
write_Ping_result :: T.Protocol p => p -> Ping_result -> P.IO ()
write_Ping_result oprot record = T.writeVal oprot $ from_Ping_result record
encode_Ping_result :: T.StatelessProtocol p => p -> Ping_result -> LBS.ByteString
encode_Ping_result oprot record = T.serializeVal oprot $ from_Ping_result record
to_Ping_result :: T.ThriftVal -> Ping_result
to_Ping_result (T.TStruct fields) = Ping_result{
  ping_result_success = P.maybe (ping_result_success default_Ping_result) (\(_,_val16) -> (case _val16 of {T.TBool _val17 -> _val17; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Ping_result _ = P.error "not a struct"
read_Ping_result :: T.Protocol p => p -> P.IO Ping_result
read_Ping_result iprot = to_Ping_result <$> T.readVal iprot (T.T_STRUCT typemap_Ping_result)
decode_Ping_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Ping_result
decode_Ping_result iprot bs = to_Ping_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_result) bs
typemap_Ping_result :: T.TypeMap
typemap_Ping_result = Map.fromList [(0,("success",T.T_BOOL))]
default_Ping_result :: Ping_result
default_Ping_result = Ping_result{
  ping_result_success = P.False}
data SendRequest_args = SendRequest_args  { sendRequest_args_logid :: I.Int32
  , sendRequest_args_jsonReq :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendRequest_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendRequest_args_logid record   `H.hashWithSalt` sendRequest_args_jsonReq record  
instance QC.Arbitrary SendRequest_args where 
  arbitrary = M.liftM SendRequest_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendRequest_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendRequest_args{sendRequest_args_logid = sendRequest_args_logid obj} then P.Nothing else P.Just $ default_SendRequest_args{sendRequest_args_logid = sendRequest_args_logid obj}
    , if obj == default_SendRequest_args{sendRequest_args_jsonReq = sendRequest_args_jsonReq obj} then P.Nothing else P.Just $ default_SendRequest_args{sendRequest_args_jsonReq = sendRequest_args_jsonReq obj}
    ]
from_SendRequest_args :: SendRequest_args -> T.ThriftVal
from_SendRequest_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v20 -> P.Just (1, ("logid",T.TI32 _v20))) $ sendRequest_args_logid record
  , (\_v20 -> P.Just (2, ("jsonReq",T.TString $ E.encodeUtf8 _v20))) $ sendRequest_args_jsonReq record
  ]
write_SendRequest_args :: T.Protocol p => p -> SendRequest_args -> P.IO ()
write_SendRequest_args oprot record = T.writeVal oprot $ from_SendRequest_args record
encode_SendRequest_args :: T.StatelessProtocol p => p -> SendRequest_args -> LBS.ByteString
encode_SendRequest_args oprot record = T.serializeVal oprot $ from_SendRequest_args record
to_SendRequest_args :: T.ThriftVal -> SendRequest_args
to_SendRequest_args (T.TStruct fields) = SendRequest_args{
  sendRequest_args_logid = P.maybe (sendRequest_args_logid default_SendRequest_args) (\(_,_val22) -> (case _val22 of {T.TI32 _val23 -> _val23; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendRequest_args_jsonReq = P.maybe (sendRequest_args_jsonReq default_SendRequest_args) (\(_,_val22) -> (case _val22 of {T.TString _val24 -> E.decodeUtf8 _val24; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SendRequest_args _ = P.error "not a struct"
read_SendRequest_args :: T.Protocol p => p -> P.IO SendRequest_args
read_SendRequest_args iprot = to_SendRequest_args <$> T.readVal iprot (T.T_STRUCT typemap_SendRequest_args)
decode_SendRequest_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendRequest_args
decode_SendRequest_args iprot bs = to_SendRequest_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendRequest_args) bs
typemap_SendRequest_args :: T.TypeMap
typemap_SendRequest_args = Map.fromList [(1,("logid",T.T_I32)),(2,("jsonReq",T.T_STRING))]
default_SendRequest_args :: SendRequest_args
default_SendRequest_args = SendRequest_args{
  sendRequest_args_logid = 0,
  sendRequest_args_jsonReq = ""}
data SendRequest_result = SendRequest_result  { sendRequest_result_success :: LT.Text
  , sendRequest_result_fail :: P.Maybe Failure
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendRequest_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendRequest_result_success record   `H.hashWithSalt` sendRequest_result_fail record  
instance QC.Arbitrary SendRequest_result where 
  arbitrary = M.liftM SendRequest_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendRequest_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendRequest_result{sendRequest_result_success = sendRequest_result_success obj} then P.Nothing else P.Just $ default_SendRequest_result{sendRequest_result_success = sendRequest_result_success obj}
    , if obj == default_SendRequest_result{sendRequest_result_fail = sendRequest_result_fail obj} then P.Nothing else P.Just $ default_SendRequest_result{sendRequest_result_fail = sendRequest_result_fail obj}
    ]
from_SendRequest_result :: SendRequest_result -> T.ThriftVal
from_SendRequest_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v27 -> (1, ("fail",from_Failure _v27))) <$> sendRequest_result_fail record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v27 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v27))) $ sendRequest_result_success record
    , (\_v27 -> (1, ("fail",from_Failure _v27))) <$> sendRequest_result_fail record
    ]
    )
write_SendRequest_result :: T.Protocol p => p -> SendRequest_result -> P.IO ()
write_SendRequest_result oprot record = T.writeVal oprot $ from_SendRequest_result record
encode_SendRequest_result :: T.StatelessProtocol p => p -> SendRequest_result -> LBS.ByteString
encode_SendRequest_result oprot record = T.serializeVal oprot $ from_SendRequest_result record
to_SendRequest_result :: T.ThriftVal -> SendRequest_result
to_SendRequest_result (T.TStruct fields) = SendRequest_result{
  sendRequest_result_success = P.maybe (sendRequest_result_success default_SendRequest_result) (\(_,_val29) -> (case _val29 of {T.TString _val30 -> E.decodeUtf8 _val30; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendRequest_result_fail = P.maybe (P.Nothing) (\(_,_val29) -> P.Just (case _val29 of {T.TStruct _val31 -> (to_Failure (T.TStruct _val31)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendRequest_result _ = P.error "not a struct"
read_SendRequest_result :: T.Protocol p => p -> P.IO SendRequest_result
read_SendRequest_result iprot = to_SendRequest_result <$> T.readVal iprot (T.T_STRUCT typemap_SendRequest_result)
decode_SendRequest_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendRequest_result
decode_SendRequest_result iprot bs = to_SendRequest_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendRequest_result) bs
typemap_SendRequest_result :: T.TypeMap
typemap_SendRequest_result = Map.fromList [(0,("success",T.T_STRING)),(1,("fail",(T.T_STRUCT typemap_Failure)))]
default_SendRequest_result :: SendRequest_result
default_SendRequest_result = SendRequest_result{
  sendRequest_result_success = "",
  sendRequest_result_fail = P.Nothing}
data Subscribe_args = Subscribe_args  { subscribe_args_topic :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Subscribe_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` subscribe_args_topic record  
instance QC.Arbitrary Subscribe_args where 
  arbitrary = M.liftM Subscribe_args (QC.arbitrary)
  shrink obj | obj == default_Subscribe_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Subscribe_args{subscribe_args_topic = subscribe_args_topic obj} then P.Nothing else P.Just $ default_Subscribe_args{subscribe_args_topic = subscribe_args_topic obj}
    ]
from_Subscribe_args :: Subscribe_args -> T.ThriftVal
from_Subscribe_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v34 -> P.Just (1, ("topic",T.TString $ E.encodeUtf8 _v34))) $ subscribe_args_topic record
  ]
write_Subscribe_args :: T.Protocol p => p -> Subscribe_args -> P.IO ()
write_Subscribe_args oprot record = T.writeVal oprot $ from_Subscribe_args record
encode_Subscribe_args :: T.StatelessProtocol p => p -> Subscribe_args -> LBS.ByteString
encode_Subscribe_args oprot record = T.serializeVal oprot $ from_Subscribe_args record
to_Subscribe_args :: T.ThriftVal -> Subscribe_args
to_Subscribe_args (T.TStruct fields) = Subscribe_args{
  subscribe_args_topic = P.maybe (subscribe_args_topic default_Subscribe_args) (\(_,_val36) -> (case _val36 of {T.TString _val37 -> E.decodeUtf8 _val37; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Subscribe_args _ = P.error "not a struct"
read_Subscribe_args :: T.Protocol p => p -> P.IO Subscribe_args
read_Subscribe_args iprot = to_Subscribe_args <$> T.readVal iprot (T.T_STRUCT typemap_Subscribe_args)
decode_Subscribe_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Subscribe_args
decode_Subscribe_args iprot bs = to_Subscribe_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Subscribe_args) bs
typemap_Subscribe_args :: T.TypeMap
typemap_Subscribe_args = Map.fromList [(1,("topic",T.T_STRING))]
default_Subscribe_args :: Subscribe_args
default_Subscribe_args = Subscribe_args{
  subscribe_args_topic = ""}
data Subscribe_result = Subscribe_result  { subscribe_result_success :: LT.Text
  , subscribe_result_fail :: P.Maybe Failure
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Subscribe_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` subscribe_result_success record   `H.hashWithSalt` subscribe_result_fail record  
instance QC.Arbitrary Subscribe_result where 
  arbitrary = M.liftM Subscribe_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_Subscribe_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Subscribe_result{subscribe_result_success = subscribe_result_success obj} then P.Nothing else P.Just $ default_Subscribe_result{subscribe_result_success = subscribe_result_success obj}
    , if obj == default_Subscribe_result{subscribe_result_fail = subscribe_result_fail obj} then P.Nothing else P.Just $ default_Subscribe_result{subscribe_result_fail = subscribe_result_fail obj}
    ]
from_Subscribe_result :: Subscribe_result -> T.ThriftVal
from_Subscribe_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v40 -> (1, ("fail",from_Failure _v40))) <$> subscribe_result_fail record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v40 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v40))) $ subscribe_result_success record
    , (\_v40 -> (1, ("fail",from_Failure _v40))) <$> subscribe_result_fail record
    ]
    )
write_Subscribe_result :: T.Protocol p => p -> Subscribe_result -> P.IO ()
write_Subscribe_result oprot record = T.writeVal oprot $ from_Subscribe_result record
encode_Subscribe_result :: T.StatelessProtocol p => p -> Subscribe_result -> LBS.ByteString
encode_Subscribe_result oprot record = T.serializeVal oprot $ from_Subscribe_result record
to_Subscribe_result :: T.ThriftVal -> Subscribe_result
to_Subscribe_result (T.TStruct fields) = Subscribe_result{
  subscribe_result_success = P.maybe (subscribe_result_success default_Subscribe_result) (\(_,_val42) -> (case _val42 of {T.TString _val43 -> E.decodeUtf8 _val43; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  subscribe_result_fail = P.maybe (P.Nothing) (\(_,_val42) -> P.Just (case _val42 of {T.TStruct _val44 -> (to_Failure (T.TStruct _val44)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Subscribe_result _ = P.error "not a struct"
read_Subscribe_result :: T.Protocol p => p -> P.IO Subscribe_result
read_Subscribe_result iprot = to_Subscribe_result <$> T.readVal iprot (T.T_STRUCT typemap_Subscribe_result)
decode_Subscribe_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Subscribe_result
decode_Subscribe_result iprot bs = to_Subscribe_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Subscribe_result) bs
typemap_Subscribe_result :: T.TypeMap
typemap_Subscribe_result = Map.fromList [(0,("success",T.T_STRING)),(1,("fail",(T.T_STRUCT typemap_Failure)))]
default_Subscribe_result :: Subscribe_result
default_Subscribe_result = Subscribe_result{
  subscribe_result_success = "",
  subscribe_result_fail = P.Nothing}
data Publish_args = Publish_args  { publish_args_topic :: LT.Text
  , publish_args_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Publish_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` publish_args_topic record   `H.hashWithSalt` publish_args_message record  
instance QC.Arbitrary Publish_args where 
  arbitrary = M.liftM Publish_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Publish_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Publish_args{publish_args_topic = publish_args_topic obj} then P.Nothing else P.Just $ default_Publish_args{publish_args_topic = publish_args_topic obj}
    , if obj == default_Publish_args{publish_args_message = publish_args_message obj} then P.Nothing else P.Just $ default_Publish_args{publish_args_message = publish_args_message obj}
    ]
from_Publish_args :: Publish_args -> T.ThriftVal
from_Publish_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v47 -> P.Just (1, ("topic",T.TString $ E.encodeUtf8 _v47))) $ publish_args_topic record
  , (\_v47 -> P.Just (2, ("message",T.TString $ E.encodeUtf8 _v47))) $ publish_args_message record
  ]
write_Publish_args :: T.Protocol p => p -> Publish_args -> P.IO ()
write_Publish_args oprot record = T.writeVal oprot $ from_Publish_args record
encode_Publish_args :: T.StatelessProtocol p => p -> Publish_args -> LBS.ByteString
encode_Publish_args oprot record = T.serializeVal oprot $ from_Publish_args record
to_Publish_args :: T.ThriftVal -> Publish_args
to_Publish_args (T.TStruct fields) = Publish_args{
  publish_args_topic = P.maybe (publish_args_topic default_Publish_args) (\(_,_val49) -> (case _val49 of {T.TString _val50 -> E.decodeUtf8 _val50; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  publish_args_message = P.maybe (publish_args_message default_Publish_args) (\(_,_val49) -> (case _val49 of {T.TString _val51 -> E.decodeUtf8 _val51; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Publish_args _ = P.error "not a struct"
read_Publish_args :: T.Protocol p => p -> P.IO Publish_args
read_Publish_args iprot = to_Publish_args <$> T.readVal iprot (T.T_STRUCT typemap_Publish_args)
decode_Publish_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Publish_args
decode_Publish_args iprot bs = to_Publish_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Publish_args) bs
typemap_Publish_args :: T.TypeMap
typemap_Publish_args = Map.fromList [(1,("topic",T.T_STRING)),(2,("message",T.T_STRING))]
default_Publish_args :: Publish_args
default_Publish_args = Publish_args{
  publish_args_topic = "",
  publish_args_message = ""}
data Publish_result = Publish_result  { publish_result_success :: LT.Text
  , publish_result_fail :: P.Maybe Failure
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Publish_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` publish_result_success record   `H.hashWithSalt` publish_result_fail record  
instance QC.Arbitrary Publish_result where 
  arbitrary = M.liftM Publish_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_Publish_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Publish_result{publish_result_success = publish_result_success obj} then P.Nothing else P.Just $ default_Publish_result{publish_result_success = publish_result_success obj}
    , if obj == default_Publish_result{publish_result_fail = publish_result_fail obj} then P.Nothing else P.Just $ default_Publish_result{publish_result_fail = publish_result_fail obj}
    ]
from_Publish_result :: Publish_result -> T.ThriftVal
from_Publish_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v54 -> (1, ("fail",from_Failure _v54))) <$> publish_result_fail record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v54 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v54))) $ publish_result_success record
    , (\_v54 -> (1, ("fail",from_Failure _v54))) <$> publish_result_fail record
    ]
    )
write_Publish_result :: T.Protocol p => p -> Publish_result -> P.IO ()
write_Publish_result oprot record = T.writeVal oprot $ from_Publish_result record
encode_Publish_result :: T.StatelessProtocol p => p -> Publish_result -> LBS.ByteString
encode_Publish_result oprot record = T.serializeVal oprot $ from_Publish_result record
to_Publish_result :: T.ThriftVal -> Publish_result
to_Publish_result (T.TStruct fields) = Publish_result{
  publish_result_success = P.maybe (publish_result_success default_Publish_result) (\(_,_val56) -> (case _val56 of {T.TString _val57 -> E.decodeUtf8 _val57; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  publish_result_fail = P.maybe (P.Nothing) (\(_,_val56) -> P.Just (case _val56 of {T.TStruct _val58 -> (to_Failure (T.TStruct _val58)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Publish_result _ = P.error "not a struct"
read_Publish_result :: T.Protocol p => p -> P.IO Publish_result
read_Publish_result iprot = to_Publish_result <$> T.readVal iprot (T.T_STRUCT typemap_Publish_result)
decode_Publish_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Publish_result
decode_Publish_result iprot bs = to_Publish_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Publish_result) bs
typemap_Publish_result :: T.TypeMap
typemap_Publish_result = Map.fromList [(0,("success",T.T_STRING)),(1,("fail",(T.T_STRUCT typemap_Failure)))]
default_Publish_result :: Publish_result
default_Publish_result = Publish_result{
  publish_result_success = "",
  publish_result_fail = P.Nothing}
data Notify_args = Notify_args  { notify_args_topic :: LT.Text
  , notify_args_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Notify_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` notify_args_topic record   `H.hashWithSalt` notify_args_message record  
instance QC.Arbitrary Notify_args where 
  arbitrary = M.liftM Notify_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Notify_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Notify_args{notify_args_topic = notify_args_topic obj} then P.Nothing else P.Just $ default_Notify_args{notify_args_topic = notify_args_topic obj}
    , if obj == default_Notify_args{notify_args_message = notify_args_message obj} then P.Nothing else P.Just $ default_Notify_args{notify_args_message = notify_args_message obj}
    ]
from_Notify_args :: Notify_args -> T.ThriftVal
from_Notify_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v61 -> P.Just (1, ("topic",T.TString $ E.encodeUtf8 _v61))) $ notify_args_topic record
  , (\_v61 -> P.Just (2, ("message",T.TString $ E.encodeUtf8 _v61))) $ notify_args_message record
  ]
write_Notify_args :: T.Protocol p => p -> Notify_args -> P.IO ()
write_Notify_args oprot record = T.writeVal oprot $ from_Notify_args record
encode_Notify_args :: T.StatelessProtocol p => p -> Notify_args -> LBS.ByteString
encode_Notify_args oprot record = T.serializeVal oprot $ from_Notify_args record
to_Notify_args :: T.ThriftVal -> Notify_args
to_Notify_args (T.TStruct fields) = Notify_args{
  notify_args_topic = P.maybe (notify_args_topic default_Notify_args) (\(_,_val63) -> (case _val63 of {T.TString _val64 -> E.decodeUtf8 _val64; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  notify_args_message = P.maybe (notify_args_message default_Notify_args) (\(_,_val63) -> (case _val63 of {T.TString _val65 -> E.decodeUtf8 _val65; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Notify_args _ = P.error "not a struct"
read_Notify_args :: T.Protocol p => p -> P.IO Notify_args
read_Notify_args iprot = to_Notify_args <$> T.readVal iprot (T.T_STRUCT typemap_Notify_args)
decode_Notify_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Notify_args
decode_Notify_args iprot bs = to_Notify_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Notify_args) bs
typemap_Notify_args :: T.TypeMap
typemap_Notify_args = Map.fromList [(1,("topic",T.T_STRING)),(2,("message",T.T_STRING))]
default_Notify_args :: Notify_args
default_Notify_args = Notify_args{
  notify_args_topic = "",
  notify_args_message = ""}
data Notify_result = Notify_result  { notify_result_success :: LT.Text
  , notify_result_fail :: P.Maybe Failure
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Notify_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` notify_result_success record   `H.hashWithSalt` notify_result_fail record  
instance QC.Arbitrary Notify_result where 
  arbitrary = M.liftM Notify_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_Notify_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Notify_result{notify_result_success = notify_result_success obj} then P.Nothing else P.Just $ default_Notify_result{notify_result_success = notify_result_success obj}
    , if obj == default_Notify_result{notify_result_fail = notify_result_fail obj} then P.Nothing else P.Just $ default_Notify_result{notify_result_fail = notify_result_fail obj}
    ]
from_Notify_result :: Notify_result -> T.ThriftVal
from_Notify_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v68 -> (1, ("fail",from_Failure _v68))) <$> notify_result_fail record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v68 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v68))) $ notify_result_success record
    , (\_v68 -> (1, ("fail",from_Failure _v68))) <$> notify_result_fail record
    ]
    )
write_Notify_result :: T.Protocol p => p -> Notify_result -> P.IO ()
write_Notify_result oprot record = T.writeVal oprot $ from_Notify_result record
encode_Notify_result :: T.StatelessProtocol p => p -> Notify_result -> LBS.ByteString
encode_Notify_result oprot record = T.serializeVal oprot $ from_Notify_result record
to_Notify_result :: T.ThriftVal -> Notify_result
to_Notify_result (T.TStruct fields) = Notify_result{
  notify_result_success = P.maybe (notify_result_success default_Notify_result) (\(_,_val70) -> (case _val70 of {T.TString _val71 -> E.decodeUtf8 _val71; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  notify_result_fail = P.maybe (P.Nothing) (\(_,_val70) -> P.Just (case _val70 of {T.TStruct _val72 -> (to_Failure (T.TStruct _val72)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Notify_result _ = P.error "not a struct"
read_Notify_result :: T.Protocol p => p -> P.IO Notify_result
read_Notify_result iprot = to_Notify_result <$> T.readVal iprot (T.T_STRUCT typemap_Notify_result)
decode_Notify_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Notify_result
decode_Notify_result iprot bs = to_Notify_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Notify_result) bs
typemap_Notify_result :: T.TypeMap
typemap_Notify_result = Map.fromList [(0,("success",T.T_STRING)),(1,("fail",(T.T_STRUCT typemap_Failure)))]
default_Notify_result :: Notify_result
default_Notify_result = Notify_result{
  notify_result_success = "",
  notify_result_fail = P.Nothing}
process_ping (seqid, iprot, oprot, handler) = do
  args <- read_Ping_args iprot
  (X.catch
    (do
      val <- Iface.ping handler
      let res = default_Ping_result{ping_result_success = val}
      T.writeMessage oprot ("ping", T.M_REPLY, seqid) $
        write_Ping_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("ping", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendRequest (seqid, iprot, oprot, handler) = do
  args <- read_SendRequest_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendRequest handler (sendRequest_args_logid args) (sendRequest_args_jsonReq args)
        let res = default_SendRequest_result{sendRequest_result_success = val}
        T.writeMessage oprot ("sendRequest", T.M_REPLY, seqid) $
          write_SendRequest_result oprot res)
      (\e  -> do
        let res = default_SendRequest_result{sendRequest_result_fail = P.Just e}
        T.writeMessage oprot ("sendRequest", T.M_REPLY, seqid) $
          write_SendRequest_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendRequest", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_subscribe (seqid, iprot, oprot, handler) = do
  args <- read_Subscribe_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.subscribe handler (subscribe_args_topic args)
        let res = default_Subscribe_result{subscribe_result_success = val}
        T.writeMessage oprot ("subscribe", T.M_REPLY, seqid) $
          write_Subscribe_result oprot res)
      (\e  -> do
        let res = default_Subscribe_result{subscribe_result_fail = P.Just e}
        T.writeMessage oprot ("subscribe", T.M_REPLY, seqid) $
          write_Subscribe_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("subscribe", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_publish (seqid, iprot, oprot, handler) = do
  args <- read_Publish_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.publish handler (publish_args_topic args) (publish_args_message args)
        let res = default_Publish_result{publish_result_success = val}
        T.writeMessage oprot ("publish", T.M_REPLY, seqid) $
          write_Publish_result oprot res)
      (\e  -> do
        let res = default_Publish_result{publish_result_fail = P.Just e}
        T.writeMessage oprot ("publish", T.M_REPLY, seqid) $
          write_Publish_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("publish", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_notify (seqid, iprot, oprot, handler) = do
  args <- read_Notify_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.notify handler (notify_args_topic args) (notify_args_message args)
        let res = default_Notify_result{notify_result_success = val}
        T.writeMessage oprot ("notify", T.M_REPLY, seqid) $
          write_Notify_result oprot res)
      (\e  -> do
        let res = default_Notify_result{notify_result_fail = P.Just e}
        T.writeMessage oprot ("notify", T.M_REPLY, seqid) $
          write_Notify_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("notify", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "ping" -> process_ping (seqid,iprot,oprot,handler)
  "sendRequest" -> process_sendRequest (seqid,iprot,oprot,handler)
  "subscribe" -> process_subscribe (seqid,iprot,oprot,handler)
  "publish" -> process_publish (seqid,iprot,oprot,handler)
  "notify" -> process_notify (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
