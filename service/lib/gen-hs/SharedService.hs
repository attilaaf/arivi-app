{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module SharedService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Shared_Types
import qualified SharedService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data GetStruct_args = GetStruct_args  { getStruct_args_key :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetStruct_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getStruct_args_key record  
instance QC.Arbitrary GetStruct_args where 
  arbitrary = M.liftM GetStruct_args (QC.arbitrary)
  shrink obj | obj == default_GetStruct_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetStruct_args{getStruct_args_key = getStruct_args_key obj} then P.Nothing else P.Just $ default_GetStruct_args{getStruct_args_key = getStruct_args_key obj}
    ]
from_GetStruct_args :: GetStruct_args -> T.ThriftVal
from_GetStruct_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v23 -> P.Just (1, ("key",T.TI32 _v23))) $ getStruct_args_key record
  ]
write_GetStruct_args :: T.Protocol p => p -> GetStruct_args -> P.IO ()
write_GetStruct_args oprot record = T.writeVal oprot $ from_GetStruct_args record
encode_GetStruct_args :: T.StatelessProtocol p => p -> GetStruct_args -> LBS.ByteString
encode_GetStruct_args oprot record = T.serializeVal oprot $ from_GetStruct_args record
to_GetStruct_args :: T.ThriftVal -> GetStruct_args
to_GetStruct_args (T.TStruct fields) = GetStruct_args{
  getStruct_args_key = P.maybe (getStruct_args_key default_GetStruct_args) (\(_,_val25) -> (case _val25 of {T.TI32 _val26 -> _val26; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetStruct_args _ = P.error "not a struct"
read_GetStruct_args :: T.Protocol p => p -> P.IO GetStruct_args
read_GetStruct_args iprot = to_GetStruct_args <$> T.readVal iprot (T.T_STRUCT typemap_GetStruct_args)
decode_GetStruct_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetStruct_args
decode_GetStruct_args iprot bs = to_GetStruct_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetStruct_args) bs
typemap_GetStruct_args :: T.TypeMap
typemap_GetStruct_args = Map.fromList [(1,("key",T.T_I32))]
default_GetStruct_args :: GetStruct_args
default_GetStruct_args = GetStruct_args{
  getStruct_args_key = 0}
data GetStruct_result = GetStruct_result  { getStruct_result_success :: SharedStruct
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetStruct_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getStruct_result_success record  
instance QC.Arbitrary GetStruct_result where 
  arbitrary = M.liftM GetStruct_result (QC.arbitrary)
  shrink obj | obj == default_GetStruct_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetStruct_result{getStruct_result_success = getStruct_result_success obj} then P.Nothing else P.Just $ default_GetStruct_result{getStruct_result_success = getStruct_result_success obj}
    ]
from_GetStruct_result :: GetStruct_result -> T.ThriftVal
from_GetStruct_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v29 -> P.Just (0, ("success",from_SharedStruct _v29))) $ getStruct_result_success record
  ]
write_GetStruct_result :: T.Protocol p => p -> GetStruct_result -> P.IO ()
write_GetStruct_result oprot record = T.writeVal oprot $ from_GetStruct_result record
encode_GetStruct_result :: T.StatelessProtocol p => p -> GetStruct_result -> LBS.ByteString
encode_GetStruct_result oprot record = T.serializeVal oprot $ from_GetStruct_result record
to_GetStruct_result :: T.ThriftVal -> GetStruct_result
to_GetStruct_result (T.TStruct fields) = GetStruct_result{
  getStruct_result_success = P.maybe (getStruct_result_success default_GetStruct_result) (\(_,_val31) -> (case _val31 of {T.TStruct _val32 -> (to_SharedStruct (T.TStruct _val32)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_GetStruct_result _ = P.error "not a struct"
read_GetStruct_result :: T.Protocol p => p -> P.IO GetStruct_result
read_GetStruct_result iprot = to_GetStruct_result <$> T.readVal iprot (T.T_STRUCT typemap_GetStruct_result)
decode_GetStruct_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetStruct_result
decode_GetStruct_result iprot bs = to_GetStruct_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetStruct_result) bs
typemap_GetStruct_result :: T.TypeMap
typemap_GetStruct_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SharedStruct)))]
default_GetStruct_result :: GetStruct_result
default_GetStruct_result = GetStruct_result{
  getStruct_result_success = default_SharedStruct}
data GetRPCReq_args = GetRPCReq_args  { getRPCReq_args_key :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetRPCReq_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getRPCReq_args_key record  
instance QC.Arbitrary GetRPCReq_args where 
  arbitrary = M.liftM GetRPCReq_args (QC.arbitrary)
  shrink obj | obj == default_GetRPCReq_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetRPCReq_args{getRPCReq_args_key = getRPCReq_args_key obj} then P.Nothing else P.Just $ default_GetRPCReq_args{getRPCReq_args_key = getRPCReq_args_key obj}
    ]
from_GetRPCReq_args :: GetRPCReq_args -> T.ThriftVal
from_GetRPCReq_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v35 -> P.Just (1, ("key",T.TI32 _v35))) $ getRPCReq_args_key record
  ]
write_GetRPCReq_args :: T.Protocol p => p -> GetRPCReq_args -> P.IO ()
write_GetRPCReq_args oprot record = T.writeVal oprot $ from_GetRPCReq_args record
encode_GetRPCReq_args :: T.StatelessProtocol p => p -> GetRPCReq_args -> LBS.ByteString
encode_GetRPCReq_args oprot record = T.serializeVal oprot $ from_GetRPCReq_args record
to_GetRPCReq_args :: T.ThriftVal -> GetRPCReq_args
to_GetRPCReq_args (T.TStruct fields) = GetRPCReq_args{
  getRPCReq_args_key = P.maybe (getRPCReq_args_key default_GetRPCReq_args) (\(_,_val37) -> (case _val37 of {T.TI32 _val38 -> _val38; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetRPCReq_args _ = P.error "not a struct"
read_GetRPCReq_args :: T.Protocol p => p -> P.IO GetRPCReq_args
read_GetRPCReq_args iprot = to_GetRPCReq_args <$> T.readVal iprot (T.T_STRUCT typemap_GetRPCReq_args)
decode_GetRPCReq_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetRPCReq_args
decode_GetRPCReq_args iprot bs = to_GetRPCReq_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetRPCReq_args) bs
typemap_GetRPCReq_args :: T.TypeMap
typemap_GetRPCReq_args = Map.fromList [(1,("key",T.T_I32))]
default_GetRPCReq_args :: GetRPCReq_args
default_GetRPCReq_args = GetRPCReq_args{
  getRPCReq_args_key = 0}
data GetRPCReq_result = GetRPCReq_result  { getRPCReq_result_success :: RPCReq
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetRPCReq_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getRPCReq_result_success record  
instance QC.Arbitrary GetRPCReq_result where 
  arbitrary = M.liftM GetRPCReq_result (QC.arbitrary)
  shrink obj | obj == default_GetRPCReq_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetRPCReq_result{getRPCReq_result_success = getRPCReq_result_success obj} then P.Nothing else P.Just $ default_GetRPCReq_result{getRPCReq_result_success = getRPCReq_result_success obj}
    ]
from_GetRPCReq_result :: GetRPCReq_result -> T.ThriftVal
from_GetRPCReq_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v41 -> P.Just (0, ("success",from_RPCReq _v41))) $ getRPCReq_result_success record
  ]
write_GetRPCReq_result :: T.Protocol p => p -> GetRPCReq_result -> P.IO ()
write_GetRPCReq_result oprot record = T.writeVal oprot $ from_GetRPCReq_result record
encode_GetRPCReq_result :: T.StatelessProtocol p => p -> GetRPCReq_result -> LBS.ByteString
encode_GetRPCReq_result oprot record = T.serializeVal oprot $ from_GetRPCReq_result record
to_GetRPCReq_result :: T.ThriftVal -> GetRPCReq_result
to_GetRPCReq_result (T.TStruct fields) = GetRPCReq_result{
  getRPCReq_result_success = P.maybe (getRPCReq_result_success default_GetRPCReq_result) (\(_,_val43) -> (case _val43 of {T.TStruct _val44 -> (to_RPCReq (T.TStruct _val44)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_GetRPCReq_result _ = P.error "not a struct"
read_GetRPCReq_result :: T.Protocol p => p -> P.IO GetRPCReq_result
read_GetRPCReq_result iprot = to_GetRPCReq_result <$> T.readVal iprot (T.T_STRUCT typemap_GetRPCReq_result)
decode_GetRPCReq_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetRPCReq_result
decode_GetRPCReq_result iprot bs = to_GetRPCReq_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetRPCReq_result) bs
typemap_GetRPCReq_result :: T.TypeMap
typemap_GetRPCReq_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_RPCReq)))]
default_GetRPCReq_result :: GetRPCReq_result
default_GetRPCReq_result = GetRPCReq_result{
  getRPCReq_result_success = default_RPCReq}
data GetRPCResp_args = GetRPCResp_args  { getRPCResp_args_key :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetRPCResp_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getRPCResp_args_key record  
instance QC.Arbitrary GetRPCResp_args where 
  arbitrary = M.liftM GetRPCResp_args (QC.arbitrary)
  shrink obj | obj == default_GetRPCResp_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetRPCResp_args{getRPCResp_args_key = getRPCResp_args_key obj} then P.Nothing else P.Just $ default_GetRPCResp_args{getRPCResp_args_key = getRPCResp_args_key obj}
    ]
from_GetRPCResp_args :: GetRPCResp_args -> T.ThriftVal
from_GetRPCResp_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v47 -> P.Just (1, ("key",T.TI32 _v47))) $ getRPCResp_args_key record
  ]
write_GetRPCResp_args :: T.Protocol p => p -> GetRPCResp_args -> P.IO ()
write_GetRPCResp_args oprot record = T.writeVal oprot $ from_GetRPCResp_args record
encode_GetRPCResp_args :: T.StatelessProtocol p => p -> GetRPCResp_args -> LBS.ByteString
encode_GetRPCResp_args oprot record = T.serializeVal oprot $ from_GetRPCResp_args record
to_GetRPCResp_args :: T.ThriftVal -> GetRPCResp_args
to_GetRPCResp_args (T.TStruct fields) = GetRPCResp_args{
  getRPCResp_args_key = P.maybe (getRPCResp_args_key default_GetRPCResp_args) (\(_,_val49) -> (case _val49 of {T.TI32 _val50 -> _val50; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetRPCResp_args _ = P.error "not a struct"
read_GetRPCResp_args :: T.Protocol p => p -> P.IO GetRPCResp_args
read_GetRPCResp_args iprot = to_GetRPCResp_args <$> T.readVal iprot (T.T_STRUCT typemap_GetRPCResp_args)
decode_GetRPCResp_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetRPCResp_args
decode_GetRPCResp_args iprot bs = to_GetRPCResp_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetRPCResp_args) bs
typemap_GetRPCResp_args :: T.TypeMap
typemap_GetRPCResp_args = Map.fromList [(1,("key",T.T_I32))]
default_GetRPCResp_args :: GetRPCResp_args
default_GetRPCResp_args = GetRPCResp_args{
  getRPCResp_args_key = 0}
data GetRPCResp_result = GetRPCResp_result  { getRPCResp_result_success :: RPCResp
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetRPCResp_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getRPCResp_result_success record  
instance QC.Arbitrary GetRPCResp_result where 
  arbitrary = M.liftM GetRPCResp_result (QC.arbitrary)
  shrink obj | obj == default_GetRPCResp_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetRPCResp_result{getRPCResp_result_success = getRPCResp_result_success obj} then P.Nothing else P.Just $ default_GetRPCResp_result{getRPCResp_result_success = getRPCResp_result_success obj}
    ]
from_GetRPCResp_result :: GetRPCResp_result -> T.ThriftVal
from_GetRPCResp_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v53 -> P.Just (0, ("success",from_RPCResp _v53))) $ getRPCResp_result_success record
  ]
write_GetRPCResp_result :: T.Protocol p => p -> GetRPCResp_result -> P.IO ()
write_GetRPCResp_result oprot record = T.writeVal oprot $ from_GetRPCResp_result record
encode_GetRPCResp_result :: T.StatelessProtocol p => p -> GetRPCResp_result -> LBS.ByteString
encode_GetRPCResp_result oprot record = T.serializeVal oprot $ from_GetRPCResp_result record
to_GetRPCResp_result :: T.ThriftVal -> GetRPCResp_result
to_GetRPCResp_result (T.TStruct fields) = GetRPCResp_result{
  getRPCResp_result_success = P.maybe (getRPCResp_result_success default_GetRPCResp_result) (\(_,_val55) -> (case _val55 of {T.TStruct _val56 -> (to_RPCResp (T.TStruct _val56)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_GetRPCResp_result _ = P.error "not a struct"
read_GetRPCResp_result :: T.Protocol p => p -> P.IO GetRPCResp_result
read_GetRPCResp_result iprot = to_GetRPCResp_result <$> T.readVal iprot (T.T_STRUCT typemap_GetRPCResp_result)
decode_GetRPCResp_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetRPCResp_result
decode_GetRPCResp_result iprot bs = to_GetRPCResp_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetRPCResp_result) bs
typemap_GetRPCResp_result :: T.TypeMap
typemap_GetRPCResp_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_RPCResp)))]
default_GetRPCResp_result :: GetRPCResp_result
default_GetRPCResp_result = GetRPCResp_result{
  getRPCResp_result_success = default_RPCResp}
process_getStruct (seqid, iprot, oprot, handler) = do
  args <- read_GetStruct_args iprot
  (X.catch
    (do
      val <- Iface.getStruct handler (getStruct_args_key args)
      let res = default_GetStruct_result{getStruct_result_success = val}
      T.writeMessage oprot ("getStruct", T.M_REPLY, seqid) $
        write_GetStruct_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("getStruct", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getRPCReq (seqid, iprot, oprot, handler) = do
  args <- read_GetRPCReq_args iprot
  (X.catch
    (do
      val <- Iface.getRPCReq handler (getRPCReq_args_key args)
      let res = default_GetRPCReq_result{getRPCReq_result_success = val}
      T.writeMessage oprot ("getRPCReq", T.M_REPLY, seqid) $
        write_GetRPCReq_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("getRPCReq", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getRPCResp (seqid, iprot, oprot, handler) = do
  args <- read_GetRPCResp_args iprot
  (X.catch
    (do
      val <- Iface.getRPCResp handler (getRPCResp_args_key args)
      let res = default_GetRPCResp_result{getRPCResp_result_success = val}
      T.writeMessage oprot ("getRPCResp", T.M_REPLY, seqid) $
        write_GetRPCResp_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("getRPCResp", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "getStruct" -> process_getStruct (seqid,iprot,oprot,handler)
  "getRPCReq" -> process_getRPCReq (seqid,iprot,oprot,handler)
  "getRPCResp" -> process_getRPCResp (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
