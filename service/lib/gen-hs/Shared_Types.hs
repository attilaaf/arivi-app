{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Shared_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data SharedStruct = SharedStruct  { sharedStruct_key :: I.Int32
  , sharedStruct_value :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SharedStruct where
  hashWithSalt salt record = salt   `H.hashWithSalt` sharedStruct_key record   `H.hashWithSalt` sharedStruct_value record  
instance QC.Arbitrary SharedStruct where 
  arbitrary = M.liftM SharedStruct (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SharedStruct = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SharedStruct{sharedStruct_key = sharedStruct_key obj} then P.Nothing else P.Just $ default_SharedStruct{sharedStruct_key = sharedStruct_key obj}
    , if obj == default_SharedStruct{sharedStruct_value = sharedStruct_value obj} then P.Nothing else P.Just $ default_SharedStruct{sharedStruct_value = sharedStruct_value obj}
    ]
from_SharedStruct :: SharedStruct -> T.ThriftVal
from_SharedStruct record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("key",T.TI32 _v2))) $ sharedStruct_key record
  , (\_v2 -> P.Just (2, ("value",T.TString $ E.encodeUtf8 _v2))) $ sharedStruct_value record
  ]
write_SharedStruct :: T.Protocol p => p -> SharedStruct -> P.IO ()
write_SharedStruct oprot record = T.writeVal oprot $ from_SharedStruct record
encode_SharedStruct :: T.StatelessProtocol p => p -> SharedStruct -> LBS.ByteString
encode_SharedStruct oprot record = T.serializeVal oprot $ from_SharedStruct record
to_SharedStruct :: T.ThriftVal -> SharedStruct
to_SharedStruct (T.TStruct fields) = SharedStruct{
  sharedStruct_key = P.maybe (sharedStruct_key default_SharedStruct) (\(_,_val4) -> (case _val4 of {T.TI32 _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sharedStruct_value = P.maybe (sharedStruct_value default_SharedStruct) (\(_,_val4) -> (case _val4 of {T.TString _val6 -> E.decodeUtf8 _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SharedStruct _ = P.error "not a struct"
read_SharedStruct :: T.Protocol p => p -> P.IO SharedStruct
read_SharedStruct iprot = to_SharedStruct <$> T.readVal iprot (T.T_STRUCT typemap_SharedStruct)
decode_SharedStruct :: T.StatelessProtocol p => p -> LBS.ByteString -> SharedStruct
decode_SharedStruct iprot bs = to_SharedStruct $ T.deserializeVal iprot (T.T_STRUCT typemap_SharedStruct) bs
typemap_SharedStruct :: T.TypeMap
typemap_SharedStruct = Map.fromList [(1,("key",T.T_I32)),(2,("value",T.T_STRING))]
default_SharedStruct :: SharedStruct
default_SharedStruct = SharedStruct{
  sharedStruct_key = 0,
  sharedStruct_value = ""}
data RPCCall = RPCCall  { rPCCall_key :: I.Int32
  , rPCCall_request :: LT.Text
  , rPCCall_response :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RPCCall where
  hashWithSalt salt record = salt   `H.hashWithSalt` rPCCall_key record   `H.hashWithSalt` rPCCall_request record   `H.hashWithSalt` rPCCall_response record  
instance QC.Arbitrary RPCCall where 
  arbitrary = M.liftM RPCCall (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RPCCall = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RPCCall{rPCCall_key = rPCCall_key obj} then P.Nothing else P.Just $ default_RPCCall{rPCCall_key = rPCCall_key obj}
    , if obj == default_RPCCall{rPCCall_request = rPCCall_request obj} then P.Nothing else P.Just $ default_RPCCall{rPCCall_request = rPCCall_request obj}
    , if obj == default_RPCCall{rPCCall_response = rPCCall_response obj} then P.Nothing else P.Just $ default_RPCCall{rPCCall_response = rPCCall_response obj}
    ]
from_RPCCall :: RPCCall -> T.ThriftVal
from_RPCCall record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v9 -> P.Just (1, ("key",T.TI32 _v9))) $ rPCCall_key record
  , (\_v9 -> P.Just (2, ("request",T.TString $ E.encodeUtf8 _v9))) $ rPCCall_request record
  , (\_v9 -> P.Just (3, ("response",T.TString $ E.encodeUtf8 _v9))) $ rPCCall_response record
  ]
write_RPCCall :: T.Protocol p => p -> RPCCall -> P.IO ()
write_RPCCall oprot record = T.writeVal oprot $ from_RPCCall record
encode_RPCCall :: T.StatelessProtocol p => p -> RPCCall -> LBS.ByteString
encode_RPCCall oprot record = T.serializeVal oprot $ from_RPCCall record
to_RPCCall :: T.ThriftVal -> RPCCall
to_RPCCall (T.TStruct fields) = RPCCall{
  rPCCall_key = P.maybe (rPCCall_key default_RPCCall) (\(_,_val11) -> (case _val11 of {T.TI32 _val12 -> _val12; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  rPCCall_request = P.maybe (rPCCall_request default_RPCCall) (\(_,_val11) -> (case _val11 of {T.TString _val13 -> E.decodeUtf8 _val13; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  rPCCall_response = P.maybe (rPCCall_response default_RPCCall) (\(_,_val11) -> (case _val11 of {T.TString _val14 -> E.decodeUtf8 _val14; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_RPCCall _ = P.error "not a struct"
read_RPCCall :: T.Protocol p => p -> P.IO RPCCall
read_RPCCall iprot = to_RPCCall <$> T.readVal iprot (T.T_STRUCT typemap_RPCCall)
decode_RPCCall :: T.StatelessProtocol p => p -> LBS.ByteString -> RPCCall
decode_RPCCall iprot bs = to_RPCCall $ T.deserializeVal iprot (T.T_STRUCT typemap_RPCCall) bs
typemap_RPCCall :: T.TypeMap
typemap_RPCCall = Map.fromList [(1,("key",T.T_I32)),(2,("request",T.T_STRING)),(3,("response",T.T_STRING))]
default_RPCCall :: RPCCall
default_RPCCall = RPCCall{
  rPCCall_key = 0,
  rPCCall_request = "",
  rPCCall_response = ""}
