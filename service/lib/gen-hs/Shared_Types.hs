{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Shared_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data SharedStruct = SharedStruct  { sharedStruct_key :: I.Int32
  , sharedStruct_value :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SharedStruct where
  hashWithSalt salt record = salt   `H.hashWithSalt` sharedStruct_key record   `H.hashWithSalt` sharedStruct_value record  
instance QC.Arbitrary SharedStruct where 
  arbitrary = M.liftM SharedStruct (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SharedStruct = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SharedStruct{sharedStruct_key = sharedStruct_key obj} then P.Nothing else P.Just $ default_SharedStruct{sharedStruct_key = sharedStruct_key obj}
    , if obj == default_SharedStruct{sharedStruct_value = sharedStruct_value obj} then P.Nothing else P.Just $ default_SharedStruct{sharedStruct_value = sharedStruct_value obj}
    ]
from_SharedStruct :: SharedStruct -> T.ThriftVal
from_SharedStruct record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("key",T.TI32 _v2))) $ sharedStruct_key record
  , (\_v2 -> P.Just (2, ("value",T.TString $ E.encodeUtf8 _v2))) $ sharedStruct_value record
  ]
write_SharedStruct :: T.Protocol p => p -> SharedStruct -> P.IO ()
write_SharedStruct oprot record = T.writeVal oprot $ from_SharedStruct record
encode_SharedStruct :: T.StatelessProtocol p => p -> SharedStruct -> LBS.ByteString
encode_SharedStruct oprot record = T.serializeVal oprot $ from_SharedStruct record
to_SharedStruct :: T.ThriftVal -> SharedStruct
to_SharedStruct (T.TStruct fields) = SharedStruct{
  sharedStruct_key = P.maybe (sharedStruct_key default_SharedStruct) (\(_,_val4) -> (case _val4 of {T.TI32 _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sharedStruct_value = P.maybe (sharedStruct_value default_SharedStruct) (\(_,_val4) -> (case _val4 of {T.TString _val6 -> E.decodeUtf8 _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SharedStruct _ = P.error "not a struct"
read_SharedStruct :: T.Protocol p => p -> P.IO SharedStruct
read_SharedStruct iprot = to_SharedStruct <$> T.readVal iprot (T.T_STRUCT typemap_SharedStruct)
decode_SharedStruct :: T.StatelessProtocol p => p -> LBS.ByteString -> SharedStruct
decode_SharedStruct iprot bs = to_SharedStruct $ T.deserializeVal iprot (T.T_STRUCT typemap_SharedStruct) bs
typemap_SharedStruct :: T.TypeMap
typemap_SharedStruct = Map.fromList [(1,("key",T.T_I32)),(2,("value",T.T_STRING))]
default_SharedStruct :: SharedStruct
default_SharedStruct = SharedStruct{
  sharedStruct_key = 0,
  sharedStruct_value = ""}
data RPCReq = RPCReq  { rPCReq_key :: I.Int32
  , rPCReq_request :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RPCReq where
  hashWithSalt salt record = salt   `H.hashWithSalt` rPCReq_key record   `H.hashWithSalt` rPCReq_request record  
instance QC.Arbitrary RPCReq where 
  arbitrary = M.liftM RPCReq (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RPCReq = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RPCReq{rPCReq_key = rPCReq_key obj} then P.Nothing else P.Just $ default_RPCReq{rPCReq_key = rPCReq_key obj}
    , if obj == default_RPCReq{rPCReq_request = rPCReq_request obj} then P.Nothing else P.Just $ default_RPCReq{rPCReq_request = rPCReq_request obj}
    ]
from_RPCReq :: RPCReq -> T.ThriftVal
from_RPCReq record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v9 -> P.Just (1, ("key",T.TI32 _v9))) $ rPCReq_key record
  , (\_v9 -> P.Just (2, ("request",T.TString $ E.encodeUtf8 _v9))) $ rPCReq_request record
  ]
write_RPCReq :: T.Protocol p => p -> RPCReq -> P.IO ()
write_RPCReq oprot record = T.writeVal oprot $ from_RPCReq record
encode_RPCReq :: T.StatelessProtocol p => p -> RPCReq -> LBS.ByteString
encode_RPCReq oprot record = T.serializeVal oprot $ from_RPCReq record
to_RPCReq :: T.ThriftVal -> RPCReq
to_RPCReq (T.TStruct fields) = RPCReq{
  rPCReq_key = P.maybe (rPCReq_key default_RPCReq) (\(_,_val11) -> (case _val11 of {T.TI32 _val12 -> _val12; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  rPCReq_request = P.maybe (rPCReq_request default_RPCReq) (\(_,_val11) -> (case _val11 of {T.TString _val13 -> E.decodeUtf8 _val13; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_RPCReq _ = P.error "not a struct"
read_RPCReq :: T.Protocol p => p -> P.IO RPCReq
read_RPCReq iprot = to_RPCReq <$> T.readVal iprot (T.T_STRUCT typemap_RPCReq)
decode_RPCReq :: T.StatelessProtocol p => p -> LBS.ByteString -> RPCReq
decode_RPCReq iprot bs = to_RPCReq $ T.deserializeVal iprot (T.T_STRUCT typemap_RPCReq) bs
typemap_RPCReq :: T.TypeMap
typemap_RPCReq = Map.fromList [(1,("key",T.T_I32)),(2,("request",T.T_STRING))]
default_RPCReq :: RPCReq
default_RPCReq = RPCReq{
  rPCReq_key = 0,
  rPCReq_request = ""}
data RPCResp = RPCResp  { rPCResp_key :: I.Int32
  , rPCResp_response :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RPCResp where
  hashWithSalt salt record = salt   `H.hashWithSalt` rPCResp_key record   `H.hashWithSalt` rPCResp_response record  
instance QC.Arbitrary RPCResp where 
  arbitrary = M.liftM RPCResp (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RPCResp = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RPCResp{rPCResp_key = rPCResp_key obj} then P.Nothing else P.Just $ default_RPCResp{rPCResp_key = rPCResp_key obj}
    , if obj == default_RPCResp{rPCResp_response = rPCResp_response obj} then P.Nothing else P.Just $ default_RPCResp{rPCResp_response = rPCResp_response obj}
    ]
from_RPCResp :: RPCResp -> T.ThriftVal
from_RPCResp record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v16 -> P.Just (1, ("key",T.TI32 _v16))) $ rPCResp_key record
  , (\_v16 -> P.Just (2, ("response",T.TString $ E.encodeUtf8 _v16))) $ rPCResp_response record
  ]
write_RPCResp :: T.Protocol p => p -> RPCResp -> P.IO ()
write_RPCResp oprot record = T.writeVal oprot $ from_RPCResp record
encode_RPCResp :: T.StatelessProtocol p => p -> RPCResp -> LBS.ByteString
encode_RPCResp oprot record = T.serializeVal oprot $ from_RPCResp record
to_RPCResp :: T.ThriftVal -> RPCResp
to_RPCResp (T.TStruct fields) = RPCResp{
  rPCResp_key = P.maybe (rPCResp_key default_RPCResp) (\(_,_val18) -> (case _val18 of {T.TI32 _val19 -> _val19; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  rPCResp_response = P.maybe (rPCResp_response default_RPCResp) (\(_,_val18) -> (case _val18 of {T.TString _val20 -> E.decodeUtf8 _val20; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_RPCResp _ = P.error "not a struct"
read_RPCResp :: T.Protocol p => p -> P.IO RPCResp
read_RPCResp iprot = to_RPCResp <$> T.readVal iprot (T.T_STRUCT typemap_RPCResp)
decode_RPCResp :: T.StatelessProtocol p => p -> LBS.ByteString -> RPCResp
decode_RPCResp iprot bs = to_RPCResp $ T.deserializeVal iprot (T.T_STRUCT typemap_RPCResp) bs
typemap_RPCResp :: T.TypeMap
typemap_RPCResp = Map.fromList [(1,("key",T.T_I32)),(2,("response",T.T_STRING))]
default_RPCResp :: RPCResp
default_RPCResp = RPCResp{
  rPCResp_key = 0,
  rPCResp_response = ""}
