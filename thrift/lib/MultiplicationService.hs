{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.12.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module MultiplicationService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Service_Types
import qualified MultiplicationService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Multiply_args = Multiply_args  { multiply_args_n1 :: I.Int32
  , multiply_args_n2 :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Multiply_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` multiply_args_n1 record   `H.hashWithSalt` multiply_args_n2 record  
instance QC.Arbitrary Multiply_args where 
  arbitrary = M.liftM Multiply_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Multiply_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Multiply_args{multiply_args_n1 = multiply_args_n1 obj} then P.Nothing else P.Just $ default_Multiply_args{multiply_args_n1 = multiply_args_n1 obj}
    , if obj == default_Multiply_args{multiply_args_n2 = multiply_args_n2 obj} then P.Nothing else P.Just $ default_Multiply_args{multiply_args_n2 = multiply_args_n2 obj}
    ]
from_Multiply_args :: Multiply_args -> T.ThriftVal
from_Multiply_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("n1",T.TI32 _v2))) $ multiply_args_n1 record
  , (\_v2 -> P.Just (2, ("n2",T.TI32 _v2))) $ multiply_args_n2 record
  ]
write_Multiply_args :: T.Protocol p => p -> Multiply_args -> P.IO ()
write_Multiply_args oprot record = T.writeVal oprot $ from_Multiply_args record
encode_Multiply_args :: T.StatelessProtocol p => p -> Multiply_args -> LBS.ByteString
encode_Multiply_args oprot record = T.serializeVal oprot $ from_Multiply_args record
to_Multiply_args :: T.ThriftVal -> Multiply_args
to_Multiply_args (T.TStruct fields) = Multiply_args{
  multiply_args_n1 = P.maybe (multiply_args_n1 default_Multiply_args) (\(_,_val4) -> (case _val4 of {T.TI32 _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  multiply_args_n2 = P.maybe (multiply_args_n2 default_Multiply_args) (\(_,_val4) -> (case _val4 of {T.TI32 _val6 -> _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Multiply_args _ = P.error "not a struct"
read_Multiply_args :: T.Protocol p => p -> P.IO Multiply_args
read_Multiply_args iprot = to_Multiply_args <$> T.readVal iprot (T.T_STRUCT typemap_Multiply_args)
decode_Multiply_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Multiply_args
decode_Multiply_args iprot bs = to_Multiply_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Multiply_args) bs
typemap_Multiply_args :: T.TypeMap
typemap_Multiply_args = Map.fromList [(1,("n1",T.T_I32)),(2,("n2",T.T_I32))]
default_Multiply_args :: Multiply_args
default_Multiply_args = Multiply_args{
  multiply_args_n1 = 0,
  multiply_args_n2 = 0}
data Multiply_result = Multiply_result  { multiply_result_success :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Multiply_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` multiply_result_success record  
instance QC.Arbitrary Multiply_result where 
  arbitrary = M.liftM Multiply_result (QC.arbitrary)
  shrink obj | obj == default_Multiply_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Multiply_result{multiply_result_success = multiply_result_success obj} then P.Nothing else P.Just $ default_Multiply_result{multiply_result_success = multiply_result_success obj}
    ]
from_Multiply_result :: Multiply_result -> T.ThriftVal
from_Multiply_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v9 -> P.Just (0, ("success",T.TI32 _v9))) $ multiply_result_success record
  ]
write_Multiply_result :: T.Protocol p => p -> Multiply_result -> P.IO ()
write_Multiply_result oprot record = T.writeVal oprot $ from_Multiply_result record
encode_Multiply_result :: T.StatelessProtocol p => p -> Multiply_result -> LBS.ByteString
encode_Multiply_result oprot record = T.serializeVal oprot $ from_Multiply_result record
to_Multiply_result :: T.ThriftVal -> Multiply_result
to_Multiply_result (T.TStruct fields) = Multiply_result{
  multiply_result_success = P.maybe (multiply_result_success default_Multiply_result) (\(_,_val11) -> (case _val11 of {T.TI32 _val12 -> _val12; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Multiply_result _ = P.error "not a struct"
read_Multiply_result :: T.Protocol p => p -> P.IO Multiply_result
read_Multiply_result iprot = to_Multiply_result <$> T.readVal iprot (T.T_STRUCT typemap_Multiply_result)
decode_Multiply_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Multiply_result
decode_Multiply_result iprot bs = to_Multiply_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Multiply_result) bs
typemap_Multiply_result :: T.TypeMap
typemap_Multiply_result = Map.fromList [(0,("success",T.T_I32))]
default_Multiply_result :: Multiply_result
default_Multiply_result = Multiply_result{
  multiply_result_success = 0}
process_multiply (seqid, iprot, oprot, handler) = do
  args <- read_Multiply_args iprot
  (X.catch
    (do
      val <- Iface.multiply handler (multiply_args_n1 args) (multiply_args_n2 args)
      let res = default_Multiply_result{multiply_result_success = val}
      T.writeMessage oprot ("multiply", T.M_REPLY, seqid) $
        write_Multiply_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("multiply", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "multiply" -> process_multiply (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
